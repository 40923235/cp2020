var tipuesearch = {"pages": [{'title': '首頁', 'text': '40923235 \n \n', 'tags': '', 'url': '首頁.html'}, {'title': 'UNIT 1', 'text': '', 'tags': '', 'url': 'UNIT 1.html'}, {'title': 'Strategies for Learning學習策略', 'text': 'PC Hardware is an online course, where the content will be presented in the form of both text and activities.While you will have more flexibility than in a traditional course, you will also have more responsibility for your own learning. You will need to: \n \n Plan how to work through each unit. \n Determine how to use the various features of the course to help you learn. \n Decide when you need to seek additional support. \n \n PC Hardware是一在線課程，它的內容將以文本和活動的方式呈現。與傳統課程相比，你將擁有更多的彈性，但同時也將對自己的學習承擔更多責任。你需要： \n \n 計劃如何利用每個單元。 \n 學習如何使用課程中的不同功能來幫助你學習。 \n 確定何時需要尋求其他幫助。 \n \n', 'tags': '', 'url': 'Strategies for Learning學習策略.html'}, {'title': 'What You Need to Know About the Course您需要了解的課程內容', 'text': 'This course contains multiple modules. Each module has features designed to support you as an independent learner, including:Learning Objectives: These are descriptions of what you should be able to do at the end of a section. A Learning Objective will allow you to direct your learning efforts and enable your progress a you to monitor s you explore the content and engage in the activities.Explanatory Content: This is the informational “meat” of every chapter. Consisting of short passages of text with information, examples, images, and explanations, this explanatory content contains pieces such as:Walk-throughs: These are videos embedded in the pages to exemplify the concepts you are exploring. They may provide a more detailed explanation of a topic or guide you through the steps of a process.Examples: Designed to illustrate specific applications of the skills and learning objectives that the course supports you to achieve.Labs: Simulations and lab activities designed to give you an opportunity to interact with various hardware elements.Many Students Wonder sidebars: These sidebars serve two purposes: \n (1) to give a quick review of concepts, such as "highly specialized input devices," that are used in the PC Hardware material and \n (2) to provide additional material or background information that you may find surprising and interesting but that is not going to be assessed in the Quiz. \n 本課程包含多個模板。每個模板均具有旨在支持你作為獨立學習者的功能，包括:學習目標：這些是描述本節最後應該做的事情。學習目標將指導你能夠努力學習，並監控探索內容和參與活動的進度。解釋內容：這是每章的信息性“內容”。由簡短的段落，信息，示例，圖像和說明組成，此說明性內容包含以下內容：演練：這些是嵌入在頁面中的視頻，以例證你所探索的概念。他們可能會提供有關主題的更詳細說明，或指導你完成流程的每個步驟。範例：說明該課程支持你實現的技能和學習目標的應用。實驗室：模擬和實驗室活動旨在為您提供與各種硬件元素進行交互的機會。許多學生都想知道側邊欄：這些側邊欄有兩個目的： \n （1）快速回顧概念，例如PC硬件材料中使用的“高度專業化的輸入設備” \n （2）提供其他材料或背景信息您可能會發現令人驚訝和有趣的東西，但是測驗中不會對此進行評估。 \n \n \n Learning Activities: There are different types of activities interspersed throughout the course. They include:Learn By Doing activities: Learn By Doing activities follow the short explanations and examples. These activities give you the chance to investigate and practice key ideas. Learn By Doing activities have hints and feedback to guide you if you need it.Did I Get This? activities: Did I Get This? activities are your chance to do a quick "self-check." These activities do not have hints, and often follow a Learn by Doing activity so that you can determine if you understand the key ideas. This will help you make sure you are ready for graded activities.Quizzes: These are short assignments that are graded. There is a Quiz at the end of each Module. The Quiz will show you and your instructor how well you understand the key concepts. If you read the information and do the activities in each Module, you should be ready for the Quiz.Metacognitive Activities: These activities are designed to support your development as an independent learner, encouraging you to reflect on your progress and plan for continuing success. These activities include:My Response activities: These short activities are located at the end of the module; they encourage you to reflect on your progress through the module and estimate how well you believe you\'ve attained the module\'s learning objectives. These activities also provide a place to share continuing questions and areas of difficulty (if you\'re using the course in conjunction with an instructor, your questions will be shared with your instructor). \n 學習活動：整個課程中擁有著不同類型的活動。它們包括：邊做邊學的活動：邊做邊學的活動遵循簡短的說明和示例。這些活動使你有機會研究和實踐關鍵思想。邊做邊學活動有提示和反饋，以在需要時指導你。我明白了嗎？活動：我明白了嗎？活動是你進行快速進行“自我檢查”的機會。這些活動沒有提示，通常會跟著“邊做邊學”的活動，以便你確定自己是否了解關鍵思想。這將幫助你確保已準備好進行分級活動。測驗：這些是評分的短期作業。每個模板的末端都有一個測驗。測驗將向你和你的老師展示你對關鍵概念的理解程度。如果你閱讀了該信息並在每個模板中進行了活動，那麼你應該已經做好準備。認知活動：這些活動旨在支持你成為獨立學習者的發展，鼓勵你反思自己的進步併計劃繼續取得成功。這些活動包括：我的反應活動：這些簡短的活動位於模板的末端；他們鼓勵你反思本單元的學習進度，並估計你認為自己達到本單元學習目標的程度。這些活動還提供了一個分享繼續存在的問題和困難領域的地方（如果你與講師一起使用本課程，你的問題將與講師分享）。 \n Checkpoints: These activities are located across the course after sections of content that can be particularly challenging or require additional practice. These metacognitive checkpointsencourage you to review your progress so far and assess yourself: are you ready to continue, or do you believe you need additional materials, practice, or self-assessment? If you feel that you\'re not ready to proceed, these checkpoints provide links to additional learning materials. \n 檢查點：這些活動位於課程的各個部分之後，這些部分可能特別具有挑戰性或需要其他練習。這些元認知 檢查點可以 鼓勵你回顧至今為止的進展並進行自我評估：你準備好繼續嗎?還是你認為你需要其他材料，練習或自我評估？如果你感覺還沒有準備好繼續，可以使用這些檢查點來鏈接到其他學習資料。 \n About these Materials 關於這些材料 \n ©2016 \xa0 Cyber Pathways Across Maryland . \n Unless otherwise specified, CPAM materials are licensed under a \xa0 Creative Commons Attribution 4.0 International License . \n This workforce solution was funded by a grant awarded by the U.S. Department of Labor’s Employment and Training Administration. The solution was created by the grantee and does not necessarily reflect the official position of the U.S. Department of Labor. The Department of Labor makes no guarantees, warrantees, or assurances of any kind, express or implied, with respect to such information, including any information on linked sites and including, but not limited to, accuracy of the information or its completeness, timeliness, usefulness, adequacy, continued availability, or ownership. \n ©2016年 馬里蘭州的網絡通路 。 \n 除非另有說明，否則CPAM材料是根據“ 知識 共享署名4.0國際許可證”獲得許可的 。 \n 該勞動力解決方案由美國勞工部就業和培訓管理局提供的一筆贈款資助。 該解決方案是由受讓人創建的，不一定反映美國勞工部的官方立場。 勞工部不對此類信息（包括鏈接網站上的任何信息）做出任何明示或暗示的擔保，保證或保證，包括但不限於信息的準確性或其完整性，及時性，有用性，充分性，持續可用性或所有權。 \n \n', 'tags': '', 'url': 'What You Need to Know About the Course您需要了解的課程內容.html'}, {'title': 'Metacognition元認知', 'text': '\n \n (definition) \n Metacognition, or “thinking about thinking,” is your awareness of yourself as a learner and your ability to regulate your own learning. It involves five distinct skills:\n \n Assessing the task. \n Evaluating your strengths and weaknesses. \n Planning an approach. \n Applying strategies and monitoring your performance. \n Reflecting and adjusting if needed. \n \n \n \n \n \n The diagram below shows you one example of the metacognitive cycle. Hover over the individual skills to learn more. \n \n \n （定義） \n 元認知或“思考”是您對自己作為學習者的意識以及對自己的學習進行調節的能力。它涉及五個不同的技能： \n \n 評估任務。 \n 評估您的優點和缺點。 \n 規劃方法。 \n 應用策略並監控績效。 \n 反思並根據需要進行調整。 \n \n \n \n \n \n 下圖顯示了元認知循環的一個示例。 將鼠標懸停在個人技能上以了解更多信息。 \n \n \n \n \n', 'tags': '', 'url': 'Metacognition元認知.html'}, {'title': 'Metacognition in Action行動中的元認知', 'text': '\n You get an assignment and ask yourself: \n “What exactly does this assignment involve and what have I learned in this course that is relevant to it?” \n You are exercising metacognitive skills #1 and #2 by assessing the task and evaluating your strengths and weaknesses in relation to it. If you think about what steps you need to take to complete the assignment and determine when it is reasonable to begin, you are exercising skill #3 by planning. If you start in on your plan and realize that you are working more slowly than you anticipated, you are putting skill #4 to work by applying a strategy and monitoring your performance. Finally, if you reflect on your performance in relation to your time frame for the task, and discover an equally effective but more efficient way to work, you are engaged in skill #5 of reflecting and adjusting your approach as needed. \n \n \n \n \n \n 你得到一個作業並問自己： \n “這項作業確切涉及什麼，我在本課程中從中學到了什麼？” \n 你正在通過評估任務並評估與之相關的優缺點來鍛煉第一和第二元認知技能。如果你考慮需要採取什麼步驟來完成作業並確定何時開始合理的訓練，那麼你正在通過計劃來鍛煉技能3。如果你按計劃開始工作，並且意識到自己的工作速度比預期的要慢，那麼你將通過應用策略和監控績效來使技能4發揮作用。最後，如果你根據任務的時間框架來反思自己的績效，並且發現一種同樣有效但更有效的工作方式，那麼你將掌握技巧五，根據需要反思和調整方法。 \n Metacognition is not rocket science. In some respects, it is fairly ordinary and intuitive. Yet you’d be surprised how often people lack strong metacognitive skills, and you’d be amazed by how much weak metacognitive skills can undermine performance. To test your own powers of metacognition, read each of the scenarios below and identify which metacognitive skill the student is struggling with. \n 元認知不是火箭科學。在某些方面，它是相當普通和直觀的。但是，你會感到驚訝的是，人們常常缺乏強大的元認知能力，而元認知能力薄弱會損害績效的情況會讓你感到驚訝。要測試你自己的元認知能力，請閱讀以下每種情況，並確定學生正在努力使用的元認知技能。 \n', 'tags': '', 'url': 'Metacognition in Action行動中的元認知.html'}, {'title': 'UNIT2', 'text': '\n \n \n \n \n', 'tags': '', 'url': 'UNIT2.html'}, {'title': 'Introduction簡介', 'text': '', 'tags': '', 'url': 'Introduction簡介.html'}, {'title': 'Functions of Computers\xa0 Input\xa0 Output\xa0 Storage\xa0 and Processing計算機功能\xa0 輸入\xa0 輸出\xa0 存儲和處理', 'text': '', 'tags': '', 'url': 'Functions of Computers\xa0 Input\xa0 Output\xa0 Storage\xa0 and Processing計算機功能\xa0 輸入\xa0 輸出\xa0 存儲和處理.html'}, {'title': 'Hardware硬件', 'text': 'A computer system includes hardware, software, and firmware. To build a computer, we must first gather the required hardware. The hardware is the part of the computer that you can touch and feel. When most people see a typical computer, they understand that there are physical components to what they are using, such as the the hard metallic or plastic System unit, central processing unit (CPU), power supply, disk drives, and other essential components. Hardware is limited by its manufacture date and specifically by the motherboard installed. Depending on age and availability, some of the hardware items may be expensive to acquire, repair, or replace. For example, if the computer is running slower over time as you add newer software, it may be necessary to increase the amount of physical memory, called\xa0 RAM \xa0 (random access memory), in the computer. In order to do this, the technician would need to purchase the correct size, speed, and style of memory according to the motherboard specifications and install it in the computer which will then enhance its ability to process information more quickly. \n \n 計算機系統包括硬件，軟件和固件。要構建計算機，我們必須首先收集所需的硬件。硬件是您可以觸摸和感覺到的計算機的一部分。當大多數人看到一台典型的計算機時，他們就會知道所使用的是物理組件，例如，硬金屬或塑料系統單元，中央處理器（CPU），電源，磁盤驅動器和其他必要組件。硬件受製造日期限制，特別是受安裝的主板限制。根據使用年限和可用性，某些硬件項目的獲取，維修或更換可能會很昂貴。例如，如果計算機隨著時間的推移運行速度變慢，而您添加了更新的軟件，則可能有必要增加物理內存量，稱為 計算機中的RAM （隨機存取存儲器）。 為此，技術人員需要根據主板規格購買正確的大小，速度和內存類型，然後將其安裝在計算機中，這將增強其更快地處理信息的能力。 \n \n Computer hardware consists of the mechanical and electrical parts of the computer. Data flows through the motherboard in what is known as the system bus. External ports, which are discussed in more detail further in this lesson, allow peripheral devices to be connected to the system unit. Common ports are USB, serial, and parallel ports.Peripheral devices consist of hardware attached to the system unit and are designated as input, output, or both. Traditional input device examples are the mouse and keyboard which are used to input data. \n 計算機硬件由計算機的機械和電氣部分組成。數據以所謂的系統總線流經母板。在本課中將進一步詳細討論的外部端口允許將外圍設備連接到系統單元。通用端口是USB，串行和並行端口。 外圍設備由連接到系統單元的硬件組成，並被指定為輸入，輸出或兩者。 傳統的輸入設備示例是用於輸入數據的鼠標和鍵盤。 \n \n Output devices consist of common items such as monitors, speakers, and printers. All of these devices are ways that the computer can give feedback to the user through either visual or auditory output.Traditionally singular devices have evolved to become both input and output. Gaming Joysticks which provide feedback to the user through vibrations and of course the touch-screen display now serve as both. \n 輸出設備由通用項目組成，例如監視器，揚聲器和打印機。所有這些設備都是計算機可以通過視覺或聽覺輸出向用戶提供反饋的方式。 傳統上，單個設備已演變為輸入和輸出。 通過振動向用戶提供反饋的遊戲操縱桿，當然觸摸屏顯示器現在兼用作兩者。 \n \n The central processing unit (CPU) is the hardware that is the “brains” of the computer and the central point where processing occurs. The CPU is the master of the computer. Every subsystem, including the input, output, and storage systems, interacts with and through the processor. For example, the processor receives the user’s input (such as a mouse double-clicking a file on the screen), then interacts with the storage device (such as the hard drive) to retrieve the file. Processing, which is the act of taking data that has been input and converting it to something usable, occurs. Then, the processor creates a visual display of the file by outputting it to the monitor through the output subsystems. \n 中央處理器（CPU）是硬件，是計算機的“大腦”，是進行處理的中心點。CPU是計算機的主人。 每個子系統，包括輸入，輸出和存儲系統，都與處理器交互並通過處理器交互。 例如，處理器接收用戶的輸入（例如，鼠標雙擊屏幕上的文件），然後與存儲設備（例如，硬盤驅動器）進行交互以檢索文件。 發生處理，這是獲取已輸入數據並將其轉換為可用數據的行為。 然後，處理器通過將文件通過輸出子系統輸出到監視器來創建文件的可視顯示。 \n \n Some hardware serves as storage. The storage functions are handled in the storage subsystems. This area is focused on the act of saving data for future use and retrieval. Early computers had very limited storage, so each program had to be entered prior to running it each time you wanted to use it. In modern computers, storage space has grown exponentially; even basic computers have hundreds of gigabytes or even terabytes of information storage available. Computers use both short-term and long-term storage in their daily operations. For example, when you are typing up a report for school, it is stored in the short-term memory (RAM) of the computer while you are typing and editing the document. Once you save the document, it is transferred to the hard drive (internal) or a USB flash drive (external) for long-term storage and future access. \n 一些硬件充當存儲。 存儲功能在存儲子系統中處理。 該領域專注於保存數據以備將來使用和檢索的行為。 早期計算機的存儲空間非常有限，因此每次您想使用它時，都必須在運行該程序之前輸入每個程序。 在現代計算機中，存儲空間成倍增長。 甚至基本計算機都具有數百GB甚至TB的可用信息存儲。 計算機在日常操作中同時使用短期和長期存儲。 例如，當您為學校鍵入報告時，在鍵入和編輯文檔時，報告將存儲在計算機的短期內存（RAM）中。 保存文檔後， \n Let’s look at the internal components of a PC. Explore the simulation below to identify and locate the key internal components of the system unit within a desktop PC. To identify components, move your mouse pointer over the name of the component or the image. Then click on each component to see a detailed view. In the detailed view, you will be able to rotate most components for a complete examination. \n 讓我們看一下PC的內部組件。 探索以下仿真，以識別並找到台式機內系統單元的關鍵內部組件。 要識別組件，請將鼠標指針移到組件或圖像的名稱上。 然後單擊每個組件以查看詳細視圖。 在詳細視圖中，您將能夠旋轉大多數組件以進行完整檢查。 \n', 'tags': '', 'url': 'Hardware硬件.html'}, {'title': 'Software軟件', 'text': 'Software is completely intangible and cannot be physically touched. Software, in its purest form, is a series of 1s and 0s (bits) that make up the code that gives the computer its instructions on how to perform a certain task. While you may be able to touch the media on which the software is stored (like a CD or DVD), you cannot really touch the software code itself. \n 軟件是完全無形的，不能被實際觸摸。 最純粹形式的軟件是由一系列1和0（位）組成的代碼，這些代碼向計算機提供有關如何執行特定任務的指令。 雖然您可以觸摸存儲軟件的介質（例如CD或DVD），但實際上不能觸摸軟件代碼本身。 \n The most basic software that a computer requires is the operating system. There are numerous operating systems on the market today, including various versions of Microsoft Windows, Macintosh OS X, Linux, Android, and iOS, to name just a few. The operating system provides the standard methods for saving, retrieving, changing, printing, and transmitting information in the computer. Operating systems contain internal commands, which are programs that are built into the operating system to perform basic tasks such as file management (delete, copy, and rename files). Additionally, operating systems also contain external commands, which are added programs to complete more complicated functions, such as defragmentation of a hard drive or handling the remote control of another computer on the network. \n 計算機所需的最基本的軟件是操作系統。 當今市場上有許多操作系統，其中包括Microsoft Windows，Macintosh OS X，Linux，Android和iOS的各種版本。 操作系統提供了用於在計算機中保存，檢索，更改，打印和傳輸信息的標準方法。 操作系統包含內部命令，這些內部命令是操作系統內置的程序，用於執行基本任務，例如文件管理（刪除，複製和重命名文件）。 此外，操作系統還包含外部命令，這些命令是添加的程序，可以完成更複雜的功能，例如對硬盤驅動器進行碎片整理或處理網絡上另一台計算機的遠程控制。 \n Finally, there are software programs called applications. These programs are used to create, store, modify, and view information that you create. Applications, such as Microsoft Office or Adobe Acrobat, allow you to read and create documents and presentations. Other applications, such as games and web browsers, may instead be used for entertainment. \n 最後，有稱為應用程序的軟件程序。 這些程序用於創建，存儲，修改和查看您創建的信息。 諸如Microsoft Office或Adobe Acrobat之類的應用程序允許您閱讀並創建文檔和演示文稿。 可以將其他應用程序（例如游戲和Web瀏覽器）用於娛樂。 \n', 'tags': '', 'url': 'Software軟件.html'}, {'title': 'Fireware固件', 'text': 'Firmware is a combination of hardware and software, often called “software on a chip.” Firmware allows control of the device to which the chip is connected. A firmware chip contains specialized software and is often attached to motherboards, optical drives (such as CD, DVD, or Blu-ray), mass storage devices, and other specialized hardware. \n 固件是硬件和軟件的組合，通常稱為“芯片上的軟件”。 固件允許控制芯片所連接的設備。 固件芯片包含專用軟件，通常連接到主板，光盤驅動器（例如CD，DVD或藍光），大容量存儲設備和其他專用硬件。 \n In older generations of firmware, the firmware was not upgradable unless you replaced the physical chip, but in recent years firmware has been designed to be “flashable.” This means that the chip can be upgraded if the software is outdated or has a programming error. This firmware “flash” replaces the older software on the chip with the latest version, improving performance or enhancing security. \n 在較早版本的固件中，除非更換了物理芯片，否則固件無法升級，但是近年來，固件被設計為“可閃存”。 這意味著，如果軟件過時或出現編程錯誤，則可以升級芯片。 該固件“閃存”用最新版本替換了芯片上的舊軟件，從而提高了性能或增強了安全性。 \n The most common type of firmware found in a computer is called the BIOS (basic input/output system), which provides the computer with the most basic of tasks before the operating system is even loaded. Without the BIOS, the computer would be rather useless, as it wouldn’t even be able to read the hard drive and load the operating system. Firmware is persistent: it remains on the chip even after the power is removed, unlike temporary storage (such as RAM). \n 計算機中最常見的固件類型稱為BIOS（基本輸入/輸出系統），BIOS甚至在加載操作系統之前就為計算機提供了最基本的任務。 沒有BIOS，計算機將變得毫無用處，因為它甚至無法讀取硬盤驅動器並加載操作系統。 固件具有持久性：與臨時存儲（例如RAM）不同，固件即使在斷電後仍保留在芯片上。 \n', 'tags': '', 'url': 'Fireware固件.html'}, {'title': 'Componentization\xa0 Standardization組件化\xa0 標準化', 'text': 'Componentization is the process of breaking down large and complex items into simple, reusable, and interchangeable pieces. For many years, computer software and hardware were made by individual companies building things that only worked for a single system. For example, if IBM made a network card, it would not work in a Compaq or Dell computer. Over the years, hardware developers realized that if they could agree to a set of standards, they could create components that could be built to work together using standard interfaces, which saves time, money, and complexity. This same concept is now being used in the software world under object-oriented programming — a standardized method of programming. \n 組件化是將大型和復雜項目分解為簡單，可重用和可互換的部分的過程。 多年來，計算機軟件和硬件是由獨立的公司製造的，這些公司只能在單個系統上工作。 例如，如果IBM製作了網卡，則它不能在Compaq或Dell計算機中工作。 多年以來，硬件開發人員意識到，如果他們同意一套標準，他們可以創建可以使用標準接口構建為可以協同工作的組件，從而節省了時間，金錢和復雜性。 現在，在面向對象的程序設計（一種標準化的程序設計方法）下的軟件世界中使用了相同的概念。 \n Standardization allows for a set of rules that everyone can follow so that hardware is interoperable and software is interoperable. This increases the ability to have componentization of hardware and software, since the input and output created are standardized. For example, web pages are coded in HTML (HyperText Markup Language), which all web browsers understand. Therefore, the user can use any web browser and still get the content they are interested in viewing because of the standardization of the system. \n 標準化允許每個人都可以遵循一組規則，以便硬件可互操作，軟件可互操作。 由於創建的輸入和輸出是標準化的，因此這提高了對硬件和軟件進行組件化的能力。 例如，網頁以HTML（超文本標記語言）編碼，所有網絡瀏覽器都可以理解。 因此，由於系統的標準化，用戶可以使用任何Web瀏覽器，並且仍然可以獲得他們感興趣的內容。 \n', 'tags': '', 'url': 'Componentization\xa0 Standardization組件化\xa0 標準化.html'}, {'title': 'Connection Interfaces and Cables連接接口和電纜', 'text': 'When looking at a customer’s personal computer, you must be able to easily identify the various components that make up the computer by sight. As you look at the image of the computer, you notice the various parts, such as the CD/DVD drive and the memory card reader bay. Both of these components would be classified as part of the storage subsystem. The headphone jack is used for audio output, while the microphone jack is used for audio input. The USB and FireWire ports are used for both input and output, as well as storage, depending on the device that is connected to the port. For example, if we connect a printer to the USB port, it would be used for output, but if we instead connected a mouse to the USB port, it would be used for input. \n 查看客戶的個人計算機時，您必須能夠通過視線輕鬆識別組成計算機的各種組件。 當您查看計算機的圖像時，會注意到各個部分，例如CD / DVD驅動器和存儲卡讀取器托架。 這兩個組件都將歸類為存儲子系統的一部分。 耳機插孔用於音頻輸出，而麥克風插孔用於音頻輸入。 USB和FireWire端口用於輸入和輸出以及存儲，具體取決於連接到該端口的設備。 例如，如果我們將打印機連接到USB端口，它將用於輸出，但是如果我們將鼠標連接到USB端口，則它將用於輸入。 \n \n', 'tags': '', 'url': 'Connection Interfaces and Cables連接接口和電纜.html'}, {'title': 'HW2', 'text': '\n from random import shuffle list = [40523138, 40523148, 40723217, 40728238, 40823148, 40823152, 40923201, 40923202, 40923203, 40923204, 40923205, 40923206, 40923207, 40923208, 40923209, 40923210, 40923211, 40923212, 40923213, 40923214, 40923216, 40923217, 40923218, 40923219, 40923220, 40923221, 40923223, 40923224, 40923225, 40923226, 40923227, 40923228, 40923229, 40923230, 40923231, 40923232, 40923233, 40923234, 40923235, 40923236, 40923237, 40923238, 40923239, 40923240, 40923241, 40923242, 40923243, 40923244, 40923245, 40923246, 40923247, 40923248, 40923249, 40923250, 40923251, 40923252, 40923253] shuffle(list) n = 5 m = int(len(list)/n) list2 = [] for i in range(0, len(list),m):  list2.append(list[i:i+m]) print(list2) \n \n from random import shuffle\xa0\xa0隨機排序列表 \n n = 5\xa0 \xa0分5組 \n int是整數 len是列表 \n', 'tags': '', 'url': 'HW2.html'}, {'title': 'HW3', 'text': '', 'tags': '', 'url': 'HW3.html'}, {'title': 'Chacrater input字符輸入', 'text': '', 'tags': '', 'url': 'Chacrater input字符輸入.html'}, {'title': 'input strings types int輸入字符串類型int', 'text': '', 'tags': '', 'url': 'input strings types int輸入字符串類型int.html'}, {'title': 'Discussion討論區-1', 'text': 'Concepts for this week: \n \n Getting user input \n Manipulating strings (a few ways) \n \n 本週的概念： \n \n 獲取用戶輸入 \n 處理字符串（幾種方法） \n \n', 'tags': '', 'url': 'Discussion討論區-1.html'}, {'title': 'User input in Python使用Python的用戶輸入', 'text': '', 'tags': '', 'url': 'User input in Python使用Python的用戶輸入.html'}, {'title': 'Manipulating strings a few ways處理字符串幾種方法', 'text': 'What you get from the \xa0 input() \xa0 function is a string. What can you do with it? \n First: Make the string into a number. Let’s say you are 100% positive that the user entered a number. You can turn the string into an integer with the function \xa0 int() . (In a later exercise or two or three there will be questions about what to do when the user does NOT enter a number and you try to do this; for now don’t worry about that problem). Here is what this looks like: \n \n age   =   input ( "Enter your age: " ) \n age   =   int ( age ) \n \n (or, if you want to be more compact with your code) \n \n age   =   int ( input ( "Enter your age: " )) \n\t \n \n In both cases, \xa0 age \xa0 will hold a variable that is an integer, and now you can do math with it. \n (Note, you can also turn integers into strings exactly in the opposite way, using the \xa0 str() \xa0 function) \n Second: Do math with strings. What do I mean by that? I mean, if I want to combine ( concatenate \xa0 is the computer science word for this) strings, all I need to do is add them: \n \n \t\n print ( "Were"   +   "wolf" ) \n print ( "Door"   +   "man" ) \n print ( "4"   +   "chan" ) \n print ( str ( 4 )   +   "chan" ) \n \n The same works for multiplication: \n \n print ( 4   *   "test" ) \n \n but division and subtraction do not work like this. In terms of multiplication, the idea of multiplyling two strings together is not well-defined. What does it mean to multiply two strings in the first place? However, it makes sense in a way to specify multiplying a string by a number - just repeat that string that number of times. Try this in your own program with all the arithmetic operations with numbers and strings - the best way to get a feel for what works and what doesn’t is to try it! \n 你從 input() 函數中得到的是一個字符串。你能做什麼呢？ \n 第一：將字符串變成數字。 假設你100％肯定用戶輸入了數字。你 可以使用函數將字符串轉換為整數 int() 。 （在以後的一兩三個練習中，當用戶不輸入數字而你嘗試這樣做時，將會出現有關如何處理的問題；現在不必擔心該問題）。 看起來是這樣的： \n \n age   =   input ( "Enter your age: " ) \n age   =   int ( age ) \n \n （或者，如果你想使代碼更緊湊） \n \n age   =   int ( input ( "Enter your age: " )) \n\t \n \n 在這兩種情況下， age 都將包含一個整數變量，現在你可以使用它進行數學運算。 \n （注意，你也可以使用 str() 函數 以相反的方式將整數轉換為字符串 ） \n 第二：對字符串進行數學運算。 那是什麼意思 \xa0 我的意思是，如果我想組合（ 連接 起來 就是計算機科學這個詞）字符串，我要做的就是添加它們： \n \n \t\n print ( "Were"   +   "wolf" ) \n print ( "Door"   +   "man" ) \n print ( "4"   +   "chan" ) \n print ( str ( 4 )   +   "chan" ) \n \n 乘法的工作原理相同： \n \n print ( 4   *   "test" ) \n \n 但是除法和減法不是這樣的。 就乘法而言，將兩個字符串相乘的想法尚不明確。 首先將兩個字符串相乘是什麼意思？ 但是，以某種方式指定將字符串乘以數字是有意義的-只需將該字符串重複該次數即可。 在你自己的程序中嘗試使用帶有數字和字符串的所有算術運算-嘗試一下什麼有效和什麼無效的最佳方法是嘗試一下！ \n', 'tags': '', 'url': 'Manipulating strings a few ways處理字符串幾種方法.html'}, {'title': 'Odd Or Even奇數或偶數', 'text': 'input if types int equality comparison numbers mod \n Again, the exercise comes first (with a few extras if you want the extra challenge or want to spend more time), followed by a discussion. Enjoy! \n \n 輸入類型是否等於相等比較數mod \n 再次，練習是第一位的（如果您需要額外的挑戰或想要花費更多的時間，還可以進行一些其他操作），然後進行討論。 請享受！ \n', 'tags': '', 'url': 'Odd Or Even奇數或偶數.html'}, {'title': 'Exercise 2 and solution練習2和解決方案', 'text': 'Ask the user for a number. Depending on whether the number is even or odd, print out an appropriate message to the user.\xa0 Hint: how does an even / odd number react differently when divided by 2? \n \n Extras: \n \n If the number is a multiple of 4, print out a different message. \n Ask the user for two numbers: one number to check (call it \xa0 num ) and one number to divide by ( check ). If \xa0 check \xa0 divides evenly into \xa0 num , tell that to the user. If not, print a different appropriate message. \n \n 詢問用戶一個數字。根據數字是偶數還是奇數，向用戶打印一條適當的消息。 提示：偶數/奇數除以2時的反應如何？ \n 附加功能： \n \n 如果數字是4的倍數，請打印出另一條消息。 \n 向用戶詢問兩個數字：一個數字要檢查（稱為 num ），另一個數字要除以（ check ）。 如果 check 平均分為 num ，請告知用戶。 如果不是，請打印其他適當的消息。 \n \n', 'tags': '', 'url': 'Exercise 2 and solution練習2和解決方案.html'}, {'title': 'Discussion討論區-2', 'text': 'Concepts for this week: \n \n Modular arithmetic (the modulus operator) \n Conditionals (if statements) \n Checking equality \n \n \xa0本週的概念： \n \n 模塊化算術（模運算符） \n 有條件的（如果語句） \n 檢查平等 \n \n', 'tags': '', 'url': 'Discussion討論區-2.html'}, {'title': 'Modular arithmetic the modulus operator模塊化算術模運算符', 'text': 'We have been doing arithmetic (addition, subtraction, multiplication, division) since elementary school, and often it is useful for us to find not the answer to a division problem but the remainder when we do a division operation. This operation is called the “modulus operation.” For example, when I divide 5 by 3, the remainder is 2, and the sentence reads like this: “5 modulo 3 is 2.” \n In the Python shell: \n >>>   5   %   3 \n 2 \n >>>   6   %   3 \n 0 \n >>>   7   %   3 \n 1 \n The \xa0 % \xa0 sign is exactly the modulus operator. \n 從小學開始，我們就一直在進行算術運算（加，減，乘，除），這對於我們尋找除法問題不是答案，而是對除法運算的其餘部分有用。該操作稱為“模運算”。例如，當我將5除以3時，餘數為2，句子的內容如下：“ 5模3為2”。 \n 在Python Shell中： \n \n   \n >>>   5   %   3 \n 2 \n >>>   6   %   3 \n 0 \n >>>   7   %   3 \n 1 \n \n 該 % 標誌是完全模運算符。 \n', 'tags': '', 'url': 'Modular arithmetic the modulus operator模塊化算術模運算符.html'}, {'title': 'Conditionals有條件的', 'text': 'When a computer (or a program) needs to decide something, it checks whether some condition is satisfied, which is where the term \xa0 conditional \xa0 comes from. Conditionals are a fancy way of saying “if statements”. If Michele was born in New York, she has an American passport. That statement is a conditional (if statement) that in this case is true. In Python this works the same way: \n \n if   age   >   17 :  \n   print ( "can see a rated R movie" ) \n elif   age   <   17   and   age   >   12 : \n   print ( "can see a rated PG-13 movie" ) \n else :  \n   print ( "can only see rated PG movies" ) \n When the program gets to the \xa0 if \xa0 statement, it will check the value of the variable called \xa0 age \xa0 against all of the conditions, in order, and will print something to the screen accordingly. Note that \xa0 elif \xa0 is a portmanteau of “else” and “if”. So if the variable \xa0 age \xa0 holds the value 15, the statement \xa0 "can see a rated PG-13 movie" \xa0 will be printed to the screen. \n Note how the statement \xa0 elif age < 17 and age > 12 \xa0 has the statement \xa0 and \xa0 - you can use \xa0 or \xa0 and \xa0 not \xa0 in the same way. Understanding a bit about logic and how it works, or being able to rationally think about logic will help you get the conditions right - oh, and a lot of practice. \n 當計算機（或程序）需要做出決定時，它會檢查是否滿足某些條件，這就是 條件 一詞的來源。條件語句是說“ if語句”的一種奇特的方式。如果米歇爾（Michele）出生於紐約，則她擁有美國護照。該語句是在這種情況下為真的條件（如果語句）。在Python中，這是相同的方式： \n \n   \n if   age   >   17 :  \n   print ( "can see a rated R movie" ) \n elif   age   <   17   and   age   >   12 : \n   print ( "can see a rated PG-13 movie" ) \n else :  \n   print ( "can only see rated PG movies" ) \n \n 當程序到達該 if 語句時，它將按 age 所有條件依次 檢查被調用的變量的值 ，並將相應的內容打印到屏幕上。 請注意，這 elif 是“ else”和“ if”的組合。 因此，如果變量 age 保留值15，則該語句 "can see a rated PG-13 movie" 將被打印到屏幕上。 \n 請注意該語句如何 elif age < 17 and age > 12 具有該語句 and -您可以使用 or 和 not 以相同的方式。 了解一些有關邏輯及其原理的知識，或者能夠理性地思考邏輯，將幫助您找到合適的條件-哦，還有很多練習。 \n 有關條件的鏈接： \n', 'tags': '', 'url': 'Conditionals有條件的.html'}, {'title': 'Checking for equality and comparators in general檢查是否相等以及一般的比較器', 'text': 'A fundamental thing you want to do with your program is check whether some number is equal to another. Say the user tells you how many questions they answered incorrectly on a practice exam, and depending on the number of correctly-answered questions, you can suggest a specific course of action. For integers, strings, floats, and many other variable types, this is done with a simple syntax:\xa0 == . To explicitly check inequality, use \xa0 != . \n if   a   ==   3 : \n print ( "the variable has the value 3" ) \n elif   a   !=   3 : \n print ( "the variable does not have the value 3" ) \n Notice how in this example, the condition is redundant. In the first condition we are checking whether the variable\xa0 a \xa0 has the value 3 and in the second, we are checking whether \xa0 a \xa0 does NOT have the value 3. However, if the first condition is not true ( a \xa0 is in fact not 3), then the second condition is by definition true. So a more efficient way to write the above conditional is like this: \n if   a   ==   3 : \n print ( "the variable has the value 3" ) \n else : \n print ( "the variable does not have the value 3" ) \n The same equality / inequality comparisons work for strings. \n 您要對程序執行的基本操作是檢查某個數字是否等於另一個數字。假設用戶告訴您在練習考試中有多少個錯誤回答的問題，並且根據正確回答的問題數，您可以提出具體的操作建議。對於整數，字符串，浮點數和許多其他變量類型，這是通過簡單的語法完成的： == 。要顯式檢查不平等，請使用 != 。 \n \n   \n if   a   ==   3 :  \n   print ( "the variable has the value 3" ) \n elif   a   !=   3 : \n   print ( "the variable does not have the value 3" ) \n \n 請注意，在此示例中，條件是多餘的。 在第一個條件中，我們正在檢查變量是否 a 具有值3，在第二個 條件中，我們正在檢查變量 是否 a 不具有值3。但是，如果第一個條件不成立（ a 實際上不是3），則第二個條件根據定義，條件是正確的。 因此，編寫上述條件的更有效方法如下： \n \n if   a   ==   3 :  \n   print ( "the variable has the value 3" ) \n else : \n   print ( "the variable does not have the value 3" ) \n \n 相同的相等/不相等比較適用於字符串。 \n', 'tags': '', 'url': 'Checking for equality and comparators in general檢查是否相等以及一般的比較器.html'}, {'title': 'List Less Than Ten列出少於十', 'text': 'list numbers elements if conditional \n 如果有條件，則列出數字元素 \n', 'tags': '', 'url': 'List Less Than Ten列出少於十.html'}, {'title': 'Exercise 3 and\xa0Solution練習3和解決方案', 'text': 'Take a list, say for example this one: \n \n    a   =   [ 1 ,   1 ,   2 ,   3 ,   5 ,   8 ,   13 ,   21 ,   34 ,   55 ,   89 ] \n \n and write a program that prints out all the elements of the list that are less than 5. \n Extras: \n \n Instead of printing the elements one by one, make a new list that has all the elements less than 5 from this list in it and print out this new list. \n Write this in one line of Python. \n Ask the user for a number and return a list that contains only elements from the original list \xa0 a \xa0 that are smaller than that number given by the user. \n \n 拿一個清單，例如說一個： \n \n    a   =   [ 1 ,   1 ,   2 ,   3 ,   5 ,   8 ,   13 ,   21 ,   34 ,   55 ,   89 ] \n \n 並編寫一個程序，打印出列表中小於5的所有元素。 \n 附加功能： \n \n 而不是一個一個地打印元素，而是創建一個新列表，其中該列表中的所有元素少於5個，然後打印出該新列表。 \n 用一行Python編寫。 \n 向用戶詢問一個數字，然後返回一個列表，該列表僅包含原始列表 a 中小於用戶給定數字的 元素 。 \n \n', 'tags': '', 'url': 'Exercise 3 and\xa0Solution練習3和解決方案.html'}, {'title': 'Discussion討論區-3', 'text': 'This week’s topics: \n \n Lists \n More conditionals (if statements) \n \n \xa0本週主題： \n \n 清單 \n 更多條件（如果語句） \n \n', 'tags': '', 'url': 'Discussion討論區-3.html'}, {'title': 'Lists清單', 'text': 'This week’s exercise hits on a topic critical for all types and styles of programming: \xa0 lists. Lists are basically an ordered way of grouping things (called\xa0elements) - the cool thing about lists in Python is that you can have a list that contains objects of multiple types. Your list can mix between strings, integers, objects, other lists, what have you. \n The way to construct an empty list is just to do \n \n x   =   [] \n \n And your variable \xa0 x \xa0 now holds an empty list. To add things to this list, just “append” them to the list. Like so: \n \n x   =   [] \n x . append ( 3 ) \n \n Your list \xa0 x \xa0 now looks like \xa0 [3] . \n In Python, lists are also\xa0iterables, which means you can loop through them with a\xa0for loop\xa0in a convenient way. (If you come from other languages like C++ or Java you are most likely used to using a counter to loop through indices of a list - in Python you can actually loop through the elements.) I will let the code speak for itself: \n \n my_list   =   [ 1 ,   3 ,   "Michele" ,   [ 5 ,   6 ,   7 ]] \n for   element   in   my_list : \n   print ( element ) \n \n Will yield the result: \n \n 1 \n3\n"Michele"\n[5, 6, 7] \n \n There are many other properties of lists, but for the basic exercise all you should need is this for loop property. Future weeks will address other properties of lists. \n 本週的練習涉及一個對所有類型和風格的編程都至關重要的主題： list 。列表基本上是一種將事物（稱為 elements ）進行分組的有序方式-Python中列表的最酷的功能是您可以擁有一個包含多種類型對象的列表。您的列表可以混合在字符串，整數，對象，其他列表之間，包括您所擁有的。 \n 構造一個空列表的方法就是 \n \n x   =   [] \n \n x 現在 ，您的變量 包含一個空列表。 要將內容添加到此列表中，只需將它們“添加”到列表中即可。 像這樣： \n \n x   =   [] \n x . append ( 3 ) \n \n 您的清單 x 現在看起來像 [3] 。 \n 在Python中，列表也是 可迭代的 ，這意味著您可以 方便地 使用 for循環 遍歷它們 。 （如果您來自其他語言，例如C ++或Java，則最有可能習慣於使用計數器循環遍歷列表的索引-在Python中，您實際上可以循環遍曆元素。）我將讓代碼說明自己： \n \n my_list   =   [ 1 ,   3 ,   "Michele" ,   [ 5 ,   6 ,   7 ]] \n for   element   in   my_list : \n   print ( element ) \n \n 將產生結果： \n \n 1  \n3 \n"Michele" \n[5, 6, 7] \n \n 列表還有許多其他屬性，但是對於基本練習而言，您只需要此for循環屬性。 未來幾週將處理列表的其他屬性。 \n', 'tags': '', 'url': 'Lists清單.html'}, {'title': 'More Conditionals更多條件', 'text': 'The nice thing about conditionals is that they follow logical operations. They can also be used to test equality. Let’s do a small example. Let’s say I want to make a piece of code that converts from a numerical grade (1-100) to a letter grade (A, B, C, D, F). The code would look like this: \n \n grade   =   input ( "Enter your grade: " ) \n if   grade   >=   90 : \n   print ( "A" ) \n elif   grade   >=   80 : \n   print ( "B" ) \n elif   grade   >=   70 : \n   print ( "C" ) \n elif   grade   >=   65 : \n   print ( "D" ) \n else : \n   print ( "F" ) \n \n What happens if \xa0 grade \xa0 is 50? All the conditions are false, so \xa0 "F" \xa0 gets printed on the screen. But what if \xa0 grade \xa0 is 95? Then all the conditions are true and everything gets printed, right? Nope! What happens is the program goes line by line. The first condition (grade >= 90) is satisfied, so the program enters into the code inside the \xa0 if \xa0 statement, executing \xa0 print("A") . Once code inside a conditional has been executed, the rest of the conditions are skipped and none of the other conditionals are checked. \n 關於條件的好處是它們遵循邏輯運算。它們也可以用於測試相等性。讓我們做一個小例子。假設我要編寫一段代碼，將其從數字等級（1-100）轉換為字母等級（A，B，C，D，F）。代碼如下所示： \n \n grade   =   input ( "Enter your grade: " ) \n if   grade   >=   90 : \n   print ( "A" ) \n elif   grade   >=   80 : \n   print ( "B" ) \n elif   grade   >=   70 : \n   print ( "C" ) \n elif   grade   >=   65 : \n   print ( "D" ) \n else : \n   print ( "F" ) \n \n 如果 grade 是50， 會發生什麼 ？ 所有條件均為假，因此 "F" 將其打印在屏幕上。 但是，如果 grade 是95，該怎麼辦？ 然後所有條件都成立，一切都打印出來了，對吧？ 不！ 程序將逐行執行。 滿足第一個條件（等級> = 90），因此程序將輸入 if 語句 內的代碼 ，執行 print("A") 。 一旦執行了條件語句中的代碼，將跳過其餘條件，並且不檢查其他條件。 \n', 'tags': '', 'url': 'More Conditionals更多條件.html'}, {'title': 'HAPPY', 'text': 'Happy New Year \n \n \n \n', 'tags': '', 'url': 'HAPPY.html'}]};